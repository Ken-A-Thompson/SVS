# Paremeters for simulations run on 2018-01-03
# Ken A. Thompson
# exploring combinations for Fig. 2.

# general notes:

######################################################################
##UNIVERSAL PARAMETERS##
######################################################################

nreps = 5 #number of replicates for each set of parameters
n = 2 #phenotypic dimensions (positive integer >=1)
data_dir = 'data'

######################################################################
##PARAMETERS TO MAKE ANCESTOR##
######################################################################

K = 1000 #number of individuals (positive integer >=1)
n_mut_list = list(np.arange(0, 101, 10)) # (start, end(add1), interval) number of mutations (positive integer ≥0)
p_mut = 0.1 #probability of having mutation at any one locus (0<=p<=1) #set this to zero for de novo only
alpha = 0.1 #mutational sd (positive real number)

######################################################################
##PARAMETERS FOR ADAPTING POPULATIONS##
######################################################################

K_adapt = K #number of individuals (positive integer)
alpha_adapt = alpha #mutational sd (positive real number)
B = 2 #number of offspring per generation per parent (positive integer)
u = 0.001 #mutation probability per generation per genome (0<u<1)


maxgen = 1000 #total number of generations populations adapt for

remove_lost = True #If true, remove mutations that are lost (0 for all individuals)
remove = 'derived' #.. any derived (not from ancestor) mutation that is lost 

nHybrids = 100 #number of hybrids to make at end of each replicate

##########################
######## SIM INFO ########
##########################


å##########################
### VARYING PAREMETERS ###
##########################

theta1 = np.array([n, n]) #optimum phenotype for population 1
theta2 = np.array([n, n]) #optimum phenotype for population 2
n_mut_list = [n,...] #number of mutations (positive integer >=1)

# data1
# Divergent adaptation to 0.75, 0.3, 0.1; lots of SGV; 5 reps each
# I messed this one up by specifying last optimum as -0.1,0.1 instead of-0.1,-0.1… so have to re-do.

#data 2
# parallel adaptation as above;

thetas_list = np.array([[[0.75,0.75], [0.75,0.75]], [[0.3,0.3], [0.3,0.3]], [[0.1,0.1], [0.1,0.1]]]) #optimum phenotypes for population 1 and 2 (parallel)

#data 3 (running overnight)
# divergent selection as in data1; but right.
# tomorrow, make fig in R… also need to make the fig for local maladaptation… :(





