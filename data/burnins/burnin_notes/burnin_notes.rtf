{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 2018-04-25 Burnin1 parameters\

\b0 \
#####\
\
n = 2 #phenotypic dimensions (positive integer >=1)\
K = 10000 #number of individuals (positive integer >=1)\
alpha = 0.1 #mutational sd (positive real number)\
B = 2 #number of offspring per generation per parent (positive integer)\
u = 0.001 #mutation probability per generation per genome (0<=u<=1)\
sigma = 0.1 #strength of selection (positive real number)\
\
theta = np.array([0]*n) #optimum phenotype (n real numbers)\
\
maxgen = 25000 #total number of generations population adapts for (positive integer)\
gen_rec = 100 #print every this many generations (positve integer <=maxgen)\
\
remove_lost = True #If true, remove mutations that are lost\
remove_fixed = True #If true, remove mutations that are fixed\
\
reps = 5 #number of replicates (positive integer)\
\
Final vals\
Seg: \
Mfreq:\
mdist:\
\
Equilibrium?: Probably not\
\
#####.\
\
\
#####\
\
n = 2 #phenotypic dimensions (positive integer >=1)\
K = 10000 #number of individuals (positive integer >=1)\
alpha = 0.1 #mutational sd (positive real number)\
B = 2 #number of offspring per generation per parent (positive integer)\
u = 0.001 #mutation probability per generation per genome (0<=u<=1)\
sigma = 0.1 #strength of selection (positive real number)\
\
theta = np.array([0]*n) #optimum phenotype (n real numbers)\
\
maxgen = 50000 #total number of generations population adapts for (positive integer)\
gen_rec = 100 #print every this many generations (positve integer <=maxgen)\
\
remove_lost = True #If true, remove mutations that are lost\
remove_fixed = True #If true, remove mutations that are fixed\
\
reps = 2 #number of replicates (positive integer)\
\
Final vals\
Seg: 171, 153\
Mfreq: 0.031, 0.036\
mdist: 0.105, 0.116\
\
Equilibrium?: Yes\
\
#####\
\
#####\
\
n = 2 #phenotypic dimensions (positive integer >=1)\
K = 10000 #number of individuals (positive integer >=1)\
alpha = 0.1 #mutational sd (positive real number)\
B = 2 #number of offspring per generation per parent (positive integer)\
u = 0.001 #mutation probability per generation per genome (0<=u<=1)\
sigma = 0.05 #strength of selection (positive real number)\
\
theta = np.array([0]*n) #optimum phenotype (n real numbers)\
\
maxgen = 50000 #total number of generations population adapts for (positive integer)\
gen_rec = 100 #print every this many generations (positve integer <=maxgen)\
\
remove_lost = True #If true, remove mutations that are lost\
remove_fixed = True #If true, remove mutations that are fixed\
\
reps = 1 #number of replicates (positive integer)\
\
Final vals\
Seg: 180, 166\
Mfreq: 0.059, 0.042\
mdist: 0.111\
\
Equilibrium?: yeah\
\
Note: changes strength of seln to 0.05 from 0.1\
\
#####\
\

\b 2018-04-25 Burnin1 parameters\
\

\b0 #####\
\
n = 2 #phenotypic dimensions (positive integer >=1)\
K = 10000 #number of individuals (positive integer >=1)\
alpha = 0.1 #mutational sd (positive real number)\
B = 2 #number of offspring per generation per parent (positive integer)\
u = 0.001 #mutation probability per generation per genome (0<=u<=1)\
sigma = 0.01 #strength of selection (positive real number)\
\
theta = np.array([0]*n) #optimum phenotype (n real numbers)\
\
maxgen = 50000 #total number of generations population adapts for (positive integer)\
gen_rec = 100 #print every this many generations (positve integer <=maxgen)\
\
remove_lost = True #If true, remove mutations that are lost\
remove_fixed = True #If true, remove mutations that are fixed\
\
reps = 1 #number of replicates (positive integer)\
\
Final vals\
Seg:\
Mfreq: \
mdist:\
\
Equilibrium?:\
\
Note: changes strength of seln to 0.05 from 0.01\
\
#####
\b \
\
Plan for tomorrow/tonight: have a smaller pop? Try to run sims with same parameters as before (i.e., opt 0.4) and look at results from set of sims.}